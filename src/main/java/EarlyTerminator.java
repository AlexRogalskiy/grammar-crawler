/**
 * Terminator optimizes the grammar crawl by allowing callers to plug in early termination logic for crawls.
 * This allows the crawler to detect if it will waste time crawling down and path that will never result in
 * any semantically valid statements and it will abort the current crawl path if this interface tells it that
 * it should be terminated.
 * <p>
 * Unlike CrawlStrategy, this interface is intended to have custom knowledge of the grammar to add semantic
 * rules on top of the syntactic rules. For example, in MySQL, a GEOMETRY column can never have a UNIQUE
 * constraint applied to it. Those statements are syntactically valid according to the MySQL grammar, but
 * not valid according to the semantics of MySQL. Instead of letting the crawler generate tens of thousands
 * of permutations with these invalid statements, this interface allows short circuiting those statements.
 */
public interface EarlyTerminator {
    /**
     * Returns true if the specified template buffer should be terminated. Note this interface is not
     * responsible for actually calling abort on the buffer to terminate it.
     *
     * @param buffer The TemplateBuffer that holds the current statement template being generated by the
     *               crawler's current crawl path through the grammar.
     * @return True if the specified template buffer should be terminated, otherwise false.
     */
    boolean shouldTerminate(TemplateBuffer buffer);
}
