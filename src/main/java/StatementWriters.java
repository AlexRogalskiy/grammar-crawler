// Copyright 2022 Dolthub, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import java.text.NumberFormat;
import java.util.Locale;

/**
 * Container for the StatementWriter interface and various common implementations.
 */
public class StatementWriters {
    /**
     * Interface for outputting completed and ready to execute statements generated by Grammar Crawler.
     */
    public interface StatementWriter {
        /**
         * Writes the specified completed, ready to execute statement out to this statement writer.
         *
         * @param statement The statement to write out.
         */
        void write(String statement);

        /**
         * Hook for any cleanup or final work needed as part of a StatementWriters.StatementWriter (e.g. closing streams, writing summary
         * stats, etc).
         */
        void finished();
    }


    public static class StdOutStatementWriter implements StatementWriter {
        private int statementCount;

        @Override
        public void write(String statement) {
            statementCount++;
            System.out.println(statement);
        }

        @Override
        public void finished() {
            System.out.println();
            NumberFormat numberFormat = NumberFormat.getNumberInstance(Locale.US);
            System.out.println("Total Statements: " + numberFormat.format(statementCount));
        }
    }

    public static class StdErrStatementWriter implements StatementWriter {
        private int statementCount;

        @Override
        public void write(String statement) {
            statementCount++;
            System.err.println(statement);
        }

        @Override
        public void finished() {
            System.err.println();
            NumberFormat numberFormat = NumberFormat.getNumberInstance(Locale.US);
            System.err.println("Total Invalid Statements: " + numberFormat.format(statementCount));
        }
    }

    public static class FileStatementWriter implements StatementWriter {
        protected FileWriter fileWriter;

        public FileStatementWriter(String filename) throws IOException {
            fileWriter = new FileWriter(new File(filename));
        }

        @Override
        public void write(String statement) {
            try {
                fileWriter.write(statement);
                fileWriter.write("\n");
            } catch (IOException e) {
                throw new RuntimeException(e);
            }
        }

        @Override
        public void finished() {
            try {
                fileWriter.close();
            } catch (IOException e) {
                throw new RuntimeException(e);
            }
        }
    }

    /**
     * Implementation of StatementWriters.StatementWriter that produces test files ready to be read in by
     * SqlLogicTest. See https://www.sqlite.org/sqllogictest/doc/trunk/about.wiki for more info
     * on the test file format.
     */
    public static class SQLLogicProtoStatementWriter extends FileStatementWriter {
        public SQLLogicProtoStatementWriter(String filename) throws IOException {
            super(filename);
        }

        @Override
        public void write(String statement) {
            try {
                fileWriter.write("statement ok\n");
                fileWriter.write(statement);
                fileWriter.write("\n\n");
            } catch (IOException e) {
                throw new RuntimeException(e);
            }
        }
    }
}
